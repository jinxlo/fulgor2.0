# =================================================================
# =      NamFulgor - AI Provider Architecture Config (.env)       =
# =================================================================
# Copy this file to .env and fill in your actual values.
# DO NOT commit your actual .env file to version control.

# --- Flask App Configuration ---
FLASK_APP=run.py
FLASK_ENV=development # Use 'production' for deployment
SECRET_KEY='generate-a-strong-random-key-here-for-namfulgor'

# --- Logging Configuration ---
LOG_LEVEL=DEBUG # Use INFO or WARNING in production


# --- Ollama Configuration ---
# The base URL for your running Ollama instance, including the /v1/ suffix.
# If running Ollama in another Docker container named 'ollama', use: http://ollama:11434/v1
# If running Flask locally (not in Docker) and Ollama is also local, use: http://localhost:11434/v1
OLLAMA_BASE_URL="http://ollama:11434/v1"
# The name of the model you have pulled in Ollama (e.g., 'llama3.1', 'mistral', 'gemma:7b').
OLLAMA_MODEL="llama3.1:8b-instruct-q4_K_M"
# The API key is ignored by Ollama but required by the client library. "ollama" is a safe default.
OLLAMA_API_KEY="ollama"

# --- AI Provider Selection ---
# Choose ONE of the following: "openai_chat", "openai_assistant", "azure_assistant", "google_gemini"
AI_PROVIDER=openai_chat

# --- OpenAI Configuration (for openai_chat and openai_assistant) ---
OPENAI_API_KEY="sk-your-openai-api-key"
OPENAI_CHAT_MODEL="gpt-4o-mini"

# --- OpenAI Assistant-specific Configuration ---
# Get this ID by running the `create_openai_assistant.py` script
OPENAI_ASSISTANT_ID=""

# --- Azure Assistant-specific Configuration ---
AZURE_OPENAI_ENDPOINT="https://your-azure-resource-name.openai.azure.com/"
AZURE_OPENAI_API_KEY="your-azure-openai-api-key"
AZURE_OPENAI_API_VERSION="2024-05-01-preview" # Use the version that supports Assistants
# This is the name of the model DEPLOYMENT in your Azure AI Studio, NOT the model name itself (e.g., 'gpt-4o-deployment')
AZURE_OPENAI_ASSISTANT_MODEL_DEPLOYMENT_NAME=""
# Get this ID by running the `create_azure_assistant.py` script
AZURE_OPENAI_ASSISTANT_ID=""

# --- Google Gemini Configuration ---
GOOGLE_API_KEY="your-google-api-key"
GOOGLE_GEMINI_MODEL="gemini-1.5-flash-latest"

# --- PostgreSQL Database Configuration ---
# These variables are used to construct the DATABASE_URL below
POSTGRES_USER=namfulgor_user
POSTGRES_PASSWORD=Laserjet10 # Your actual DB password
POSTGRES_DB=namfulgor_db
# This URL is used by the Flask app to connect to the DB container.
# The hostname 'namfulgor_postgres_db' must match the service name in your docker-compose.yml
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@namfulgor_postgres_db:5432/${POSTGRES_DB}

# --- Redis Configuration ---
# Required for Assistant providers. The hostname 'redis' should match the service name in your docker-compose.yml.
# You will need to add a Redis service to your docker-compose file.
REDIS_URL=redis://redis:6379/0

# --- Support Board Integration ---
SUPPORT_BOARD_API_URL="https://your-supportboard-domain.com/include/api.php"
SUPPORT_BOARD_API_TOKEN="your-support-board-admin-api-token"
SUPPORT_BOARD_WEBHOOK_SECRET="your_optional_webhook_secret_key"
SUPPORT_BOARD_DM_BOT_USER_ID="2"
SUPPORT_BOARD_AGENT_IDS="3,4,15" # ADJUST TO YOUR ACTUAL HUMAN AGENT IDs
HUMAN_TAKEOVER_PAUSE_MINUTES=30

# --- Lead Capture API ---
# The API for creating and updating leads in your other system.
LEAD_CAPTURE_API_URL="http://your-lead-capture-api-url.com"
LEAD_CAPTURE_API_KEY="your-lead-capture-api-key"
ENABLE_LEAD_GENERATION_TOOLS=true

# --- Email Processor Configuration (for price updates) ---
IMAP_SERVER="imap.your-email-provider.com"
EMAIL_USER_IMAP="price-updates@example.com"
EMAIL_PASS_IMAP="your_strong_mail_password"
# This URL must point to the Flask app container. 'namfulgor_flask_app' is the name from your `docker ps`
NAMFULGOR_API_PRICE_UPDATE_URL="http://namfulgor_flask_app:5000/api/battery/update-prices"
INTERNAL_SERVICE_API_KEY="a-secure-shared-key-between-services"
EMAIL_POLLING_INTERVAL_SECONDS=600
EXPECTED_EMAIL_SUBJECT="Battery Price Update"
AUTHORIZED_EMAIL_SENDER="authorized_sender@example.com"

# --- Application Specific Settings ---
MAX_HISTORY_MESSAGES=16