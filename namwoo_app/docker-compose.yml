# docker-compose.yml

services:
  postgres_db:
    image: pgvector/pgvector:pg16
    container_name: namfulgor_postgres_db
    ports:
      - "5433:5432" 
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - namfulgor_pgdata:/var/lib/postgresql/data 
      - ./initial_data_scripts/init_pgvector.sql:/docker-entrypoint-initdb.d/00_init_pgvector.sql
      - ./data/schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: "redis:7-alpine"
    container_name: namfulgor_redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - namfulgor_redis_data:/data

  namfulgor_app:
    build:
      context: . 
      dockerfile: Dockerfile 
    container_name: namfulgor_flask_app
    ports:
      - "5000:5000" 
    depends_on:
      postgres_db: 
        condition: service_healthy 
      redis:
        condition: service_healthy
    environment:
      # --- NEW LINES TO ADD FOR THE ENTRYPOINT SCRIPT ---
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # --- END OF NEW LINES ---
      # Pass all necessary variables from the .env file to the container
      - FLASK_APP=${FLASK_APP}
      - FLASK_ENV=${FLASK_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AI_PROVIDER=${AI_PROVIDER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_CHAT_MODEL=${OPENAI_CHAT_MODEL}
      - OPENAI_ASSISTANT_ID=${OPENAI_ASSISTANT_ID}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
      - AZURE_OPENAI_ASSISTANT_ID=${AZURE_OPENAI_ASSISTANT_ID}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - SUPPORT_BOARD_API_URL=${SUPPORT_BOARD_API_URL}
      - SUPPORT_BOARD_API_TOKEN=${SUPPORT_BOARD_API_TOKEN}
      - SUPPORT_BOARD_DM_BOT_USER_ID=${SUPPORT_BOARD_DM_BOT_USER_ID}
      - LEAD_CAPTURE_API_URL=${LEAD_CAPTURE_API_URL}
      - LEAD_CAPTURE_API_KEY=${LEAD_CAPTURE_API_KEY}
      - INTERNAL_SERVICE_API_KEY=${INTERNAL_SERVICE_API_KEY}
    volumes:
      - .:/usr/src/app
    restart: unless-stopped

  email_price_updater:
    build:
      context: ./email_processor 
      dockerfile: Dockerfile 
    container_name: namfulgor_email_updater
    depends_on:
      namfulgor_app: 
        condition: service_started
    environment:
      - IMAP_SERVER=${IMAP_SERVER}
      - EMAIL_USER_IMAP=${EMAIL_USER_IMAP}
      - EMAIL_PASS_IMAP=${EMAIL_PASS_IMAP}
      - NAMFULGOR_API_PRICE_UPDATE_URL=${NAMFULGOR_API_PRICE_UPDATE_URL}
      - NAMFULGOR_API_RULES_UPDATE_URL=${NAMFULGOR_API_RULES_UPDATE_URL}
      - INTERNAL_SERVICE_API_KEY=${INTERNAL_SERVICE_API_KEY}
      - EMAIL_POLLING_INTERVAL_SECONDS=${EMAIL_POLLING_INTERVAL_SECONDS}
      - PRICE_EMAIL_SUBJECT=${PRICE_EMAIL_SUBJECT}
      - RULES_EMAIL_SUBJECT=${RULES_EMAIL_SUBJECT}
      - AUTHORIZED_EMAIL_SENDER=${AUTHORIZED_EMAIL_SENDER}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - CONFIRMATION_RECIPIENT=${CONFIRMATION_RECIPIENT}
    volumes:
      - ./email_processor/data:/app/data
    restart: unless-stopped

volumes:
  namfulgor_pgdata:
  namfulgor_redis_data: